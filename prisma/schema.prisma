generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                       String    @id @unique @default(uuid())
  serial                   Int       @unique @default(autoincrement())
  email                    String    @unique
  first_name               String
  last_name                String
  birth_date               DateTime? @default(now())
  gender                   String?   @default("")
  height                   Int?      @default(0)
  weight                   Int?      @default(0)
  skin_tone_classification String?   @default("")
  season                   String?   @default("")
  sub_season               String?   @default("")
  body_type                String?   @default("")
  budget_min               Int?      @default(0)
  budget_max               Int?      @default(0)
  location                 Json?     @default("{}")
  profile_url              String?   @default("")
  role                     Int?      @default(0)

  tokens          UserToken[]
  prompt_settings PromptSettings?

  skin_tone_complements UserSkinToneComplement[]
  style_preferences     UserStylePreference[]
  favorite_colors       UserFavoriteColor[]
  preferred_brands      UserPreferredBrand[]
  preferred_styles      UserPreferredStyle[]

  closets       Closet[]
  fits          Fit[]
  chat_session  ChatSession?
  notifications Notification[]
}

model UserToken {
  id         String   @id @unique @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  amount     Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserSkinToneComplement {
  id         String @id @unique @default(uuid())
  user_id    String
  user       User   @relation(fields: [user_id], references: [id])
  complement String
}

model UserStylePreference {
  id      String @id @unique @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  style   String
}

model UserFavoriteColor {
  id      String @id @unique @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  color   String
}

model UserPreferredBrand {
  id      String @id @unique @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  brand   String
}

model UserPreferredStyle {
  id      String @id @unique @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  style   String
}

model PromptSettings {
  id                     String   @id @unique @default(uuid())
  user_id                String   @unique
  user                   User     @relation(fields: [user_id], references: [id])
  consider_skin_tone     Boolean  @default(false)
  prioritize_preferences Boolean  @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

model Clothing {
  id        String  @id @unique @default(uuid())
  serial    Int     @unique @default(autoincrement())
  image_url String
  color     String?
  material  String?
  pattern   String?
  brand     String?
  name      String?

  closet_id String
  closet    Closet @relation(fields: [closet_id], references: [id])

  tags       ClothingTag[]
  seasons    ClothingSeason[]
  occasions  ClothingOccasion[]
  categories ClothingCategory[]
  fits       FitClothing[]
  worn       Worn[]
}

model ClothingCategory {
  id          String   @id @unique @default(uuid())
  clothing_id String
  clothing    Clothing @relation(fields: [clothing_id], references: [id])
  category    String
  type        String
}

model ClothingTag {
  id          String   @id @unique @default(uuid())
  clothing_id String
  clothing    Clothing @relation(fields: [clothing_id], references: [id])
  tag         String
}

model ClothingSeason {
  id          String   @id @unique @default(uuid())
  clothing_id String
  clothing    Clothing @relation(fields: [clothing_id], references: [id])
  season      String
}

model ClothingOccasion {
  id          String   @id @unique @default(uuid())
  clothing_id String
  clothing    Clothing @relation(fields: [clothing_id], references: [id])
  occasion    String
}

model FitClothing {
  id          String   @id @unique @default(uuid())
  fit_id      String
  clothing_id String
  fit         Fit      @relation(fields: [fit_id], references: [id])
  clothing    Clothing @relation(fields: [clothing_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Worn {
  id          String    @id @unique @default(uuid())
  last_worn   DateTime?
  count       Int       @default(0)
  clothing_id String
  clothing    Clothing  @relation(fields: [clothing_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Closet {
  id          String     @id @unique @default(uuid())
  serial      Int        @unique @default(autoincrement())
  name        String
  description String
  user_id     String
  user        User       @relation(fields: [user_id], references: [id])
  clothes     Clothing[]
}

model Fit {
  id            String        @id @unique @default(uuid())
  serial        Int           @unique @default(autoincrement())
  name          String
  thumbnail_url String?
  user_id       String
  user          User          @relation(fields: [user_id], references: [id])
  clothes       FitClothing[]
}

model ChatSession {
  id         String    @id @unique @default(uuid())
  created_at DateTime  @default(now())
  user_id    String    @unique
  user       User      @relation(fields: [user_id], references: [id])
  messages   Message[]
}

model Message {
  id              String      @id @unique @default(uuid())
  created_at      DateTime    @default(now())
  role            String
  content         String
  chat_session_id String
  chat_session    ChatSession @relation(fields: [chat_session_id], references: [id])
}

model Notification {
  id         String   @id @unique @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type       String
  content    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
