generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                       String    @id @unique @default(uuid())
  serial                   Int       @unique @default(autoincrement())
  tokens                   Int
  email                    String    @unique
  first_name               String
  last_name                String
  birth_date               DateTime?
  gender                   String?
  height                   Int?
  weight                   Int?
  skin_tone_classification String?
  season                   String?
  sub_season               String?
  skin_tone_complements    String[]
  body_type                String?
  style_preferences        String[]
  favorite_colors          String[]
  preferred_brands         String[]
  preferred_style          String[]
  budget_min               Int?
  budget_max               Int?
  location                 Json?
  profile_url              String?

  clothes        Clothing[]
  closets        Closet[]
  fits           Fit[]
  chat_ession    ChatSession?
  promptSettings PromptSettings?

  notifications Notification[]
}

model PromptSettings {
  id      String @id @unique @default(uuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])

  consider_skin_tone     Boolean @default(false)
  prioritize_preferences Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clothing {
  id        String   @id @unique @default(uuid())
  serial    Int      @unique @default(autoincrement())
  image_url String
  category  Json     @default("{}")
  tags      String[] @default([])

  season   String[] @default([])
  occasion String[] @default([])
  color    String?
  material String?
  pattern  String?
  brand    String?
  name     String?

  user_id   String
  user      User   @relation(fields: [user_id], references: [id])
  closet_id String
  closet    Closet @relation(fields: [closet_id], references: [id])

  fits_top    Fit[] @relation("TopFit")
  fits_bottom Fit[] @relation("BottomFit")
  fits_shoes  Fit[] @relation("ShoesFit")

  worn Worn[]
}

model Worn {
  id          String    @id @unique @default(uuid())
  last_worn   DateTime?
  count       Int       @default(0)
  clothing_id String
  clothing    Clothing  @relation(fields: [clothing_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Closet {
  id          String @id @unique @default(uuid())
  serial      Int    @unique @default(autoincrement())
  name        String
  description String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  clothes Clothing[]
}

model Fit {
  id     String @id @unique @default(uuid())
  serial Int    @unique @default(autoincrement())

  top_id    String
  bottom_id String
  shoes_id  String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  top    Clothing @relation("TopFit", fields: [top_id], references: [id])
  bottom Clothing @relation("BottomFit", fields: [bottom_id], references: [id])
  shoes  Clothing @relation("ShoesFit", fields: [shoes_id], references: [id])
}

model ChatSession {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  messages Message[]
}

model Message {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())

  role    String
  content String

  chat_session_id String
  chat_session    ChatSession @relation(fields: [chat_session_id], references: [id])
}

model Notification {
  id        String   @id @unique @default(uuid())
  user_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type      String // INFO", "WARNING", "SUCCESS", "ERROR"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
